(()=>{"use strict";class t{constructor(t,e,o,n){this.title=t,this.description=e,this.dueDate=o,this.priority=n}generate(){const t=document.createElement("div"),e=document.createElement("h2");e.innerHTML=this.title;const o=document.createElement("p");return o.innerHTML=this.description,t.appendChild(e),t.appendChild(o),t}get getTitle(){return this.title}set setTitle(t){this.title=t}get getDescription(){return this.description}set setDescription(t){this.description=t}}t.prototype.generate;class e{todoItems=[];constructor(t){this.name=t}addTodo(t){this.todoItems.push(t)}printProject(){let t=document.createElement("h1");t.innerHTML=this.name,document.body.appendChild(t),this.todoItems.forEach((t=>{let e=new Todo(t.title,t.description,t.dueDate,t.priority);document.body.appendChild(e.generate())}))}}const o=[];!function(n){if(function(t){var e;try{e=window[t];var o="__storage_test__";return e.setItem(o,o),e.removeItem(o),!0}catch(t){return t instanceof DOMException&&(22===t.code||1014===t.code||"QuotaExceededError"===t.name||"NS_ERROR_DOM_QUOTA_REACHED"===t.name)&&e&&0!==e.length}}("localStorage")){let n=localStorage.getItem("projects"),i=JSON.parse(n);for(let n=0;n<i.length;n++){let r=new e(i[n].name);for(let e=0;e<i[n].todoItems.length;e++){let o=i[n].todoItems[e].title,s=i[n].todoItems[e].description,d=i[n].todoItems[e].dueDate,c=i[n].todoItems[e].priority,l=new t(o,s,d,c);r.addTodo(l)}o.push(r)}}else console.log("No local world!")}(),console.log(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,