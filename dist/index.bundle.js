(()=>{"use strict";class e{constructor(e,t,o,n){this.title=e,this.description=t,this.dueDate=o,this.priority=n}generate(){const e=document.createElement("div"),t=document.createElement("h2");t.innerHTML=this.title;const o=document.createElement("p");return o.innerHTML=this.description,e.appendChild(t),e.appendChild(o),e}get getTitle(){return this.title}set setTitle(e){this.title=e}get getDescription(){return this.description}set setDescription(e){this.description=e}}e.prototype.generate;class t{todoItems=[];constructor(e){this.name=e}addTodo(e){this.todoItems.push(e)}printProject(){let e=document.createElement("h1");e.innerHTML=this.name,document.body.appendChild(e),this.todoItems.forEach((e=>{let t=new Todo(e.title,e.description,e.dueDate,e.priority);document.body.appendChild(t.generate())}))}}const o=[];!function(n){if(function(e){var t;try{t=window[e];var o="__storage_test__";return t.setItem(o,o),t.removeItem(o),!0}catch(e){return e instanceof DOMException&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&t&&0!==t.length}}("localStorage")){let n=localStorage.getItem("projects"),i=JSON.parse(n);for(let n=0;n<i.length;n++){let r=new t(i[n].name);for(let t=0;t<i[n].todoItems.length;t++){let o=i[n].todoItems[t].title,d=i[n].todoItems[t].description,s=i[n].todoItems[t].dueDate,c=i[n].todoItems[t].priority,a=new e(o,d,s,c);r.addTodo(a)}o.push(r)}}else console.log("No local world!")}(),document.body.appendChild(function(e){const t=document.createElement("nav");return t.classList.add("navbar"),e.forEach((e=>{const o=document.createElement("div");o.innerHTML=e.name,e.todoItems.forEach((e=>{const t=document.createElement("div");t.innerHTML=e.title,o.appendChild(t)})),t.appendChild(o)})),t}(o))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,